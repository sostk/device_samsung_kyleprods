diff -ur a/external/bluetooth/bluedroid/audio_a2dp_hw/audio_a2dp_hw.c b/external/bluetooth/bluedroid/audio_a2dp_hw/audio_a2dp_hw.c
--- a/external/bluetooth/bluedroid/audio_a2dp_hw/audio_a2dp_hw.c	2015-12-28 04:29:48.000000000 +0545
+++ b/external/bluetooth/bluedroid/audio_a2dp_hw/audio_a2dp_hw.c	2016-05-18 19:22:32.044017336 +0545
@@ -632,9 +632,7 @@
     /* dump params */
     str_parms_dump(parms);
 
-    retval = str_parms_get_str(parms, "closing", keyval, sizeof(keyval));
-
-    if (retval >= 0)
+    if (str_parms_get_str(parms, "closing", keyval, sizeof(keyval)) >= 0)
     {
         if (strcmp(keyval, "true") == 0)
         {
@@ -643,9 +641,7 @@
         }
     }
 
-    retval = str_parms_get_str(parms, "A2dpSuspended", keyval, sizeof(keyval));
-
-    if (retval >= 0)
+    if (str_parms_get_str(parms, "closing", keyval, sizeof(keyval)) >= 0)
     {
         if (strcmp(keyval, "true") == 0)
         {
Only in b/external/bluetooth/bluedroid/audio_a2dp_hw: audio_a2dp_hw.c~
diff -ur a/frameworks/av/include/media/stagefright/ColorConverter.h b/frameworks/av/include/media/stagefright/ColorConverter.h
--- a/frameworks/av/include/media/stagefright/ColorConverter.h	2016-02-03 01:48:51.000000000 +0545
+++ b/frameworks/av/include/media/stagefright/ColorConverter.h	2016-05-18 19:23:43.608021616 +0545
@@ -67,6 +67,9 @@
     status_t convertCbYCrY(
             const BitmapParams &src, const BitmapParams &dst);
 
+    status_t convertYCbYCr(
+            const BitmapParams &src, const BitmapParams &dst);
+
     status_t convertYUV420Planar(
             const BitmapParams &src, const BitmapParams &dst);
 
Only in b/frameworks/av/include/media/stagefright: ColorConverter.h~
diff -ur a/frameworks/av/media/libstagefright/ACodec.cpp b/frameworks/av/media/libstagefright/ACodec.cpp
--- a/frameworks/av/media/libstagefright/ACodec.cpp	2016-02-03 01:48:51.000000000 +0545
+++ b/frameworks/av/media/libstagefright/ACodec.cpp	2016-05-18 19:31:30.360049531 +0545
@@ -491,11 +491,7 @@
 
     status_t err;
     if (mNativeWindow != NULL && portIndex == kPortIndexOutput) {
-        if (mStoreMetaDataInOutputBuffers) {
-            err = allocateOutputMetaDataBuffers();
-        } else {
-            err = allocateOutputBuffersFromNativeWindow();
-        }
+        err = allocateOutputBuffersFromNativeWindow();
     } else {
         OMX_PARAM_PORTDEFINITIONTYPE def;
         InitOMXParams(&def);
@@ -603,11 +599,29 @@
     def.format.video.nFrameHeight,
     eNativeColorFormat);
 #else
+
+    OMX_COLOR_FORMATTYPE HalColorFormat;
+
+    ALOGI("PATCH:ACodec:configureOutputBuffersFromNativeWindow def.format.video.eColorFormat: %i", def.format.video.eColorFormat);
+    switch (def.format.video.eColorFormat) {
+        case OMX_COLOR_FormatYCbYCr:
+            ALOGI("PATCH:ACodec:configureOutputBuffersFromNativeWindow def.format.video.eColorFormat: OMX_COLOR_FormatYCbYCr (%i) -> (%i)", OMX_COLOR_FormatYCbYCr, (OMX_COLOR_FORMATTYPE)19);
+            def.format.video.eColorFormat = OMX_COLOR_FormatYUV420Planar;
+            mOMX->setParameter(mNode, OMX_IndexParamPortDefinition, &def, sizeof(def));
+            ALOGI("PATCH:ACodec:configureOutputBuffersFromNativeWindow def.format.video.eColorFormat: OMX_COLOR_FormatYCbYCr (%i) -> (%i) -> HAL_PIXEL_FORMAT_YV12 (%i)", OMX_COLOR_FormatYCbYCr, (OMX_COLOR_FORMATTYPE)19, (OMX_COLOR_FORMATTYPE)HAL_PIXEL_FORMAT_YV12);
+            HalColorFormat = (OMX_COLOR_FORMATTYPE)HAL_PIXEL_FORMAT_YV12;
+        break;
+        default:
+            ALOGI("PATCH:ACodec:configureOutputBuffersFromNativeWindow def.format.video.eColorFormat: default(%i) -> HAL_PIXEL_FORMAT_YV12 (%i)", def.format.video.eColorFormat, (OMX_COLOR_FORMATTYPE)HAL_PIXEL_FORMAT_YV12);
+            HalColorFormat = (OMX_COLOR_FORMATTYPE)HAL_PIXEL_FORMAT_YV12;
+        break;
+    }
+
     err = native_window_set_buffers_geometry(
             mNativeWindow.get(),
             def.format.video.nFrameWidth,
             def.format.video.nFrameHeight,
-            def.format.video.eColorFormat);
+            HalColorFormat);
 #endif
 
     if (err != 0) {
@@ -1724,6 +1738,31 @@
     format.nIndex = 0;
     bool found = false;
 
+    ALOGI("PATCH:ACodec:setVideoPortFormatType Begin colorFormat: %i", colorFormat);
+    ALOGI("PATCH:ACodec:setVideoPortFormatType Begin format.eColorFormat: %i", format.eColorFormat);
+
+    if(format.eColorFormat == OMX_COLOR_FormatYCbYCr){
+        if (!strncmp(mComponentName.c_str(), "OMX.brcm.", 9)){
+            ALOGI("PATCH:ACodec:setVideoPortFormatType is brcm");
+            format.eColorFormat = OMX_COLOR_FormatYUV420Planar;
+            status_t errs = mOMX->setParameter(mNode, OMX_IndexParamVideoPortFormat, &format, sizeof(format));
+                if (errs != OK){
+                    ALOGE("PATCH:ACodec:setVideoPortFormatType setParameter failed: %d", errs);
+                }
+            ALOGI("PATCH:ACodec:setVideoPortFormatType format.eColorFormat set %i", format.eColorFormat);
+        }
+    }
+    ALOGI("PATCH:ACodec:setVideoPortFormatType End format.eColorFormat : %i", format.eColorFormat);
+    if(colorFormat == OMX_COLOR_FormatYCbYCr){
+        if (!strncmp(mComponentName.c_str(), "OMX.brcm.", 9)){
+            ALOGI("PATCH:ACodec:setVideoPortFormatType is brcm");
+            colorFormat = OMX_COLOR_FormatYUV420Planar;
+            ALOGI("PATCH:ACodec:setVideoPortFormatType colorFormat set %i", colorFormat);
+        }
+    }
+    ALOGI("PATCH:ACodec:setVideoPortFormatType End format.eColorFormat : %i", colorFormat);
+
+
     OMX_U32 index = 0;
     for (;;) {
         format.nIndex = index;
@@ -1763,9 +1802,21 @@
     }
 
     if (!found) {
+        ALOGI("PATCH:ACodec:setVideoPortFormatType UNKNOWN_ERROR");
         return UNKNOWN_ERROR;
     }
 
+    ALOGI("PATCH:ACodec:setVideoPortFormatType : %i", format.eColorFormat);
+
+    if(format.eColorFormat == OMX_COLOR_FormatYCbYCr){
+        if (!strncmp(mComponentName.c_str(), "OMX.brcm.", 9)){
+            ALOGI("PATCH:ACodec:setVideoPortFormatType is brcm");
+            format.eColorFormat = OMX_COLOR_FormatYUV420Planar;
+            ALOGI("PATCH:ACodec:setVideoPortFormatType set %i", format.eColorFormat);
+        }
+    }
+    ALOGI("PATCH:ACodec:setVideoPortFormatType end : %i", format.eColorFormat);
+
     status_t err = mOMX->setParameter(
             mNode, OMX_IndexParamVideoPortFormat,
             &format, sizeof(format));
@@ -1782,9 +1833,29 @@
     status_t err = mOMX->getParameter(
             mNode, OMX_IndexParamVideoPortFormat,
             &format, sizeof(format));
+
+    ALOGI("PATCH:ACodec:setSupportedOutputFormat : %i", format.eColorFormat);
+
     CHECK_EQ(err, (status_t)OK);
     CHECK_EQ((int)format.eCompressionFormat, (int)OMX_VIDEO_CodingUnused);
 
+    if(format.eColorFormat == OMX_COLOR_FormatYCbYCr){
+        if (!strncmp(mComponentName.c_str(), "OMX.brcm.", 9)){
+            ALOGI("PATCH:ACodec:setSupportedOutputFormat is brcm");
+            format.eColorFormat = OMX_COLOR_FormatYUV420Planar;
+            status_t errs = mOMX->setParameter(mNode, OMX_IndexParamVideoPortFormat, &format, sizeof(format));
+                if (errs != OK){
+                    ALOGE("PATCH:ACodec:setSupportedOutputFormat setParameter failed: %d", errs);
+                }
+            ALOGI("PATCH:ACodec:setSupportedOutputFormat format.eColorFormat set %i", format.eColorFormat);
+        }
+    }
+    ALOGI("PATCH:ACodec:setSupportedOutputFormat end : %i", format.eColorFormat);
+
+    mOMX->setParameter(
+              mNode, OMX_IndexParamVideoPortFormat,
+              &format, sizeof(format));
+
     return mOMX->setParameter(
             mNode, OMX_IndexParamVideoPortFormat,
             &format, sizeof(format));
@@ -2467,9 +2538,24 @@
 
     CHECK_EQ(err, (status_t)OK);
 
+    ALOGI("PATCH:ACodec:setVideoFormatOnPort: %i", def.format.video.eColorFormat);
+
+    if(def.format.video.eColorFormat == OMX_COLOR_FormatYCbYCr){
+        if (!strncmp(mComponentName.c_str(), "OMX.brcm.", 9)){
+            ALOGI("PATCH:ACodec:setVideoFormatOnPort set %i", OMX_COLOR_FormatYUV420Planar);
+            def.format.video.eColorFormat = OMX_COLOR_FormatYUV420Planar;
+            status_t errs = mOMX->setParameter(mNode, OMX_IndexParamPortDefinition, &def, sizeof(def));
+            if (errs != OK){
+                ALOGE("PATCH:ACodec:setVideoFormatOnPort setParameter failed: %d", errs);
+            }
+        }
+    }
+
+    ALOGI("PATCH:ACodec:setVideoFormatOnPort: %i end", def.format.video.eColorFormat);
+
     if (portIndex == kPortIndexInput) {
         // XXX Need a (much) better heuristic to compute input buffer sizes.
-        const size_t X = 64 * 1024;
+        const size_t X = 64 * 8 * 1024;
         if (def.nBufferSize < X) {
             def.nBufferSize = X;
         }
@@ -2628,6 +2714,8 @@
                 notify->setInt32("slice-height", videoDef->nSliceHeight);
                 notify->setInt32("color-format", videoDef->eColorFormat);
 
+                ALOGI("PATCH:ACodec:sendFormatChange: %i", videoDef->eColorFormat);
+
                 OMX_CONFIG_RECTTYPE rect;
                 InitOMXParams(&rect);
                 rect.nPortIndex = kPortIndexOutput;
Only in b/frameworks/av/media/libstagefright: ACodec.cpp~
diff -ur a/frameworks/av/media/libstagefright/colorconversion/ColorConverter.cpp b/frameworks/av/media/libstagefright/colorconversion/ColorConverter.cpp
--- a/frameworks/av/media/libstagefright/colorconversion/ColorConverter.cpp	2016-02-03 01:48:51.000000000 +0545
+++ b/frameworks/av/media/libstagefright/colorconversion/ColorConverter.cpp	2016-05-18 19:35:44.556064734 +0545
@@ -44,6 +44,7 @@
     switch (mSrcFormat) {
         case OMX_COLOR_FormatYUV420Planar:
         case OMX_COLOR_FormatCbYCrY:
+        case OMX_COLOR_FormatYCbYCr:
         case OMX_QCOM_COLOR_FormatYVU420SemiPlanar:
         case OMX_COLOR_FormatYUV420SemiPlanar:
         case OMX_TI_COLOR_FormatYUV420PackedSemiPlanar:
@@ -85,6 +86,10 @@
         size_t dstWidth, size_t dstHeight,
         size_t dstCropLeft, size_t dstCropTop,
         size_t dstCropRight, size_t dstCropBottom) {
+
+    ALOGE("PATCH:ColorConverter:convert: mSrcFormat: %i", mSrcFormat);
+    ALOGE("PATCH:ColorConverter:convert: mDstFormat: %i", mDstFormat);
+
     if (mDstFormat != OMX_COLOR_Format16bitRGB565) {
         return ERROR_UNSUPPORTED;
     }
@@ -110,6 +115,10 @@
             err = convertCbYCrY(src, dst);
             break;
 
+        case OMX_COLOR_FormatYCbYCr:
+            err = convertYCbYCr(src, dst);
+            break;
+
         case OMX_QCOM_COLOR_FormatYVU420SemiPlanar:
             err = convertQCOMYUV420SemiPlanar(src, dst);
             break;
@@ -134,6 +143,7 @@
 
 status_t ColorConverter::convertCbYCrY(
         const BitmapParams &src, const BitmapParams &dst) {
+        ALOGE("PATCH:ColorConverter:convertCbYCrY");
     // XXX Untested
 
     uint8_t *kAdjustedClip = initClip();
@@ -196,8 +206,74 @@
     return OK;
 }
 
+status_t ColorConverter::convertYCbYCr(
+        const BitmapParams &src, const BitmapParams &dst) {
+        ALOGE("PATCH:ColorConverter:convertYCbYCr");
+    // XXX Untested
+
+    uint8_t *kAdjustedClip = initClip();
+
+    if (!((src.mCropLeft & 1) == 0
+        && src.cropWidth() == dst.cropWidth()
+        && src.cropHeight() == dst.cropHeight())) {
+        return ERROR_UNSUPPORTED;
+    }
+
+    uint16_t *dst_ptr = (uint16_t *)dst.mBits
+        + dst.mCropTop * dst.mWidth + dst.mCropLeft;
+
+    const uint8_t *src_ptr = (const uint8_t *)src.mBits
+        + (src.mCropTop * dst.mWidth + src.mCropLeft) * 2;
+
+    for (size_t y = 0; y < src.cropHeight(); ++y) {
+        for (size_t x = 0; x < src.cropWidth(); x += 2) {
+            signed y1 = (signed)src_ptr[2 * x ] - 16;
+            signed y2 = (signed)src_ptr[2 * x + 2] - 16;
+            signed u = (signed)src_ptr[2 * x + 1] - 128;  
+            signed v = (signed)src_ptr[2 * x + 3] - 128;
+
+            signed u_b = u * 517;
+            signed u_g = -u * 100;
+            signed v_g = -v * 208;
+            signed v_r = v * 409;
+
+            signed tmp1 = y1 * 298;
+            signed b1 = (tmp1 + u_b) / 256;
+            signed g1 = (tmp1 + v_g + u_g) / 256;
+            signed r1 = (tmp1 + v_r) / 256;
+
+            signed tmp2 = y2 * 298;
+            signed b2 = (tmp2 + u_b) / 256;
+            signed g2 = (tmp2 + v_g + u_g) / 256;
+            signed r2 = (tmp2 + v_r) / 256;
+
+            uint32_t rgb1 =
+                ((kAdjustedClip[r1] >> 3) << 11)
+                | ((kAdjustedClip[g1] >> 2) << 5)
+                | (kAdjustedClip[b1] >> 3);
+
+            uint32_t rgb2 =
+                ((kAdjustedClip[r2] >> 3) << 11)
+                | ((kAdjustedClip[g2] >> 2) << 5)
+                | (kAdjustedClip[b2] >> 3);
+
+            if (x + 1 < src.cropWidth()) {
+                *(uint32_t *)(&dst_ptr[x]) = (rgb2 << 16) | rgb1;
+            } else {
+                dst_ptr[x] = rgb1;
+            }
+        }
+
+        src_ptr += src.mWidth * 2;
+        dst_ptr += dst.mWidth;
+    }
+
+    return OK;
+}
+
 status_t ColorConverter::convertYUV420Planar(
         const BitmapParams &src, const BitmapParams &dst) {
+        ALOGE("PATCH:ColorConverter:convertYUV420Planar");
     if (!((src.mCropLeft & 1) == 0
             && src.cropWidth() == dst.cropWidth()
             && src.cropHeight() == dst.cropHeight())) {
Only in b/frameworks/av/media/libstagefright/colorconversion: ColorConverter.cpp~
diff -ur a/frameworks/av/media/libstagefright/OMXCodec.cpp b/frameworks/av/media/libstagefright/OMXCodec.cpp
--- a/frameworks/av/media/libstagefright/OMXCodec.cpp	2016-02-03 01:48:51.000000000 +0545
+++ b/frameworks/av/media/libstagefright/OMXCodec.cpp	2016-05-18 20:14:45.480204740 +0545
@@ -440,6 +440,8 @@
 
     Vector<CodecNameAndQuirks> matchingCodecs;
 
+    ALOGI("PATCH:OMXCodec:Create mime: %s", mime);
+
 #ifdef QCOM_HARDWARE
     if (ExtendedCodec::useHWAACDecoder(mime)) {
         findMatchingCodecs(mime, createEncoder,
@@ -917,6 +919,7 @@
                 mNode, OMX_IndexParamVideoPortFormat,
                 &format, sizeof(format));
 
+        ALOGI("PATCH:OMXCodec:setVideoPortFormatType : %i", format.eColorFormat);
         if (err != OK) {
             return err;
         }
@@ -952,6 +955,7 @@
     status_t err = mOMX->setParameter(
             mNode, OMX_IndexParamVideoPortFormat,
             &format, sizeof(format));
+    ALOGI("PATCH:OMXCodec:setVideoPortFormatType end : %i", format.eColorFormat);
 
     return err;
 }
@@ -1589,8 +1593,23 @@
                 mNode, OMX_IndexParamVideoPortFormat,
                 &format, sizeof(format));
         CHECK_EQ(err, (status_t)OK);
+
+        ALOGI("PATCH:OMXCodec:setVideoOutputFormat begin : %i, component %s", format.eColorFormat, mComponentName);
         CHECK_EQ((int)format.eCompressionFormat, (int)OMX_VIDEO_CodingUnused);
 
+        if (format.eColorFormat == OMX_COLOR_FormatYCbYCr) {
+            ALOGI("PATCH:OMXCodec:setVideoOutputFormat: OMX_COLOR_FormatYCbYCr");
+            if (!strncmp(mComponentName, "OMX.brcm.", 9)){
+                ALOGI("PATCH:OMXCodec:setVideoOutputFormat: OMX.brcm.");
+                format.eColorFormat = OMX_COLOR_FormatYUV420Planar;
+                ALOGI("PATCH:OMXCodec:setVideoOutputFormat: OMX_COLOR_FormatYCbYCr -> OMX_COLOR_FormatYUV420Planar");
+                status_t errs = mOMX->setParameter(mNode, OMX_IndexParamVideoPortFormat, &format, sizeof(format));
+                if (errs != OK){
+                    ALOGE("PATCH:OMXCodec:setVideoOutputFormat: setParameter failed: %d", errs);
+                }
+            }
+        }
+
 #if 0
         CHECK(format.eColorFormat == OMX_COLOR_FormatYUV420Planar
                || format.eColorFormat == OMX_COLOR_FormatYUV420SemiPlanar
@@ -1625,6 +1644,7 @@
                 err = mOMX->getParameter(
                         mNode, OMX_IndexParamVideoPortFormat,
                             &format, sizeof(format));
+                ALOGI("PATCH:OMXCodec:setVideoOutputFormat : %i", format.eColorFormat);
                 if (format.eColorFormat == colorFormat) {
                     break;
                 }
@@ -1658,11 +1678,7 @@
 
 #if 1
     // XXX Need a (much) better heuristic to compute input buffer sizes.
-#ifdef USE_SAMSUNG_COLORFORMAT
     const size_t X = 64 * 8 * 1024;
-#else
-    const size_t X = 64 * 1024;
-#endif
     if (def.nBufferSize < X) {
         def.nBufferSize = X;
     }
@@ -1943,6 +1959,7 @@
 }
 
 status_t OMXCodec::allocateBuffers() {
+    ALOGI("PATCH:OMXCodec:allocateBuffers");
     status_t err = allocateBuffersOnPort(kPortIndexInput);
 
     if (err != OK) {
@@ -1953,6 +1970,11 @@
 }
 
 status_t OMXCodec::allocateBuffersOnPort(OMX_U32 portIndex) {
+
+    ALOGI("PATCH:OMXCodec:allocateBuffersOnPort");
+    ALOGI("PATCH:OMXCodec:allocateBuffersOnPort dump port");
+    dumpPortStatus(portIndex);
+
     if (mNativeWindow != NULL && portIndex == kPortIndexOutput) {
         return allocateOutputBuffersFromNativeWindow();
     }
@@ -2176,6 +2198,8 @@
     InitOMXParams(&def);
     def.nPortIndex = kPortIndexOutput;
 
+    ALOGI("PATCH:OMXCodec:allocateOutputBuffersFromNativeWindow -> [%s]", mComponentName);
+
     status_t err = mOMX->getParameter(
             mNode, OMX_IndexParamPortDefinition, &def, sizeof(def));
     if (err != OK) {
@@ -2183,12 +2207,41 @@
         return err;
     }
 
+    ALOGI("PATCH:OMXCodec:allocateOutputBuffersFromNativeWindow dump port");
+    dumpPortStatus(kPortIndexOutput);
+
 #ifndef USE_SAMSUNG_COLORFORMAT
+
+    OMX_COLOR_FORMATTYPE HalColorFormat;
+    status_t errss;
+
+    ALOGI("PATCH:OMXCodec:allocateOutputBuffersFromNativeWindow def.format.video.eColorFormat: %i", def.format.video.eColorFormat);
+    switch (def.format.video.eColorFormat) {
+        case OMX_COLOR_FormatYCbYCr:
+            ALOGI("PATCH:OMXCodec:allocateOutputBuffersFromNativeWindow OMX_COLOR_FormatYCbYCr(%i) -> (%i)", OMX_COLOR_FormatYCbYCr, (OMX_COLOR_FORMATTYPE)19);
+            ALOGI("PATCH:OMXCodec:allocateOutputBuffersFromNativeWindow OMX_COLOR_FormatYCbYCr(%i) -> HAL_PIXEL_FORMAT_YV12(%i)", OMX_COLOR_FormatYCbYCr, (OMX_COLOR_FORMATTYPE)HAL_PIXEL_FORMAT_YV12);
+            def.format.video.eColorFormat = OMX_COLOR_FormatYUV420Planar;
+            errss = mOMX->setParameter(mNode, OMX_IndexParamPortDefinition, &def, sizeof(def));
+            if (errss != OK){
+                ALOGE("PATCH:OMXCodec:allocateOutputBuffersFromNativeWindow setParameter failed: %d", errss);
+            }
+            HalColorFormat = (OMX_COLOR_FORMATTYPE)HAL_PIXEL_FORMAT_YV12;
+        break;
+        case OMX_COLOR_FormatYUV420Planar:
+            ALOGE("PATCH:OMXCodec:allocateOutputBuffersFromNativeWindow OMX_COLOR_FormatYUV420Planar(%i) -> HAL_PIXEL_FORMAT_YV12(%i)", OMX_COLOR_FormatYUV420Planar, (OMX_COLOR_FORMATTYPE)HAL_PIXEL_FORMAT_YV12);
+            HalColorFormat = (OMX_COLOR_FORMATTYPE)HAL_PIXEL_FORMAT_YV12;
+        break;
+        default:
+            ALOGE("PATCH:OMXCodec:allocateOutputBuffersFromNativeWindow default(%i) -> default(%i)", def.format.video.eColorFormat, def.format.video.eColorFormat);
+            HalColorFormat = def.format.video.eColorFormat;
+        break;
+    }
+
     err = native_window_set_buffers_geometry(
             mNativeWindow.get(),
             def.format.video.nFrameWidth,
             def.format.video.nFrameHeight,
-            def.format.video.eColorFormat);
+            HalColorFormat);
 #else
     OMX_COLOR_FORMATTYPE eColorFormat;
 
@@ -2288,6 +2341,9 @@
         }
     }
 
+    ALOGI("PATCH:OMXCodec:allocateOutputBuffersFromNativeWindow end dump port");
+    dumpPortStatus(kPortIndexOutput);
+
     err = native_window_set_buffer_count(
             mNativeWindow.get(), def.nBufferCountActual);
     if (err != 0) {
@@ -4977,30 +5033,30 @@
             mNode, OMX_IndexParamPortDefinition, &def, sizeof(def));
     CHECK_EQ(err, (status_t)OK);
 
-    printf("%s Port = {\n", portIndex == kPortIndexInput ? "Input" : "Output");
+    ALOGI("%s Port = {\n", portIndex == kPortIndexInput ? "Input" : "Output");
 
     CHECK((portIndex == kPortIndexInput && def.eDir == OMX_DirInput)
           || (portIndex == kPortIndexOutput && def.eDir == OMX_DirOutput));
 
-    printf("  nBufferCountActual = %ld\n", def.nBufferCountActual);
-    printf("  nBufferCountMin = %ld\n", def.nBufferCountMin);
-    printf("  nBufferSize = %ld\n", def.nBufferSize);
+    ALOGI("  nBufferCountActual = %ld\n", def.nBufferCountActual);
+    ALOGI("  nBufferCountMin = %ld\n", def.nBufferCountMin);
+    ALOGI("  nBufferSize = %ld\n", def.nBufferSize);
 
     switch (def.eDomain) {
         case OMX_PortDomainImage:
         {
             const OMX_IMAGE_PORTDEFINITIONTYPE *imageDef = &def.format.image;
 
-            printf("\n");
-            printf("  // Image\n");
-            printf("  nFrameWidth = %ld\n", imageDef->nFrameWidth);
-            printf("  nFrameHeight = %ld\n", imageDef->nFrameHeight);
-            printf("  nStride = %ld\n", imageDef->nStride);
+            ALOGI("\n");
+            ALOGI("  // Image\n");
+            ALOGI("  nFrameWidth = %ld\n", imageDef->nFrameWidth);
+            ALOGI("  nFrameHeight = %ld\n", imageDef->nFrameHeight);
+            ALOGI("  nStride = %ld\n", imageDef->nStride);
 
-            printf("  eCompressionFormat = %s\n",
+            ALOGI("  eCompressionFormat = %s\n",
                    imageCompressionFormatString(imageDef->eCompressionFormat));
 
-            printf("  eColorFormat = %s\n",
+            ALOGI("  eColorFormat = %s\n",
                    colorFormatString(imageDef->eColorFormat));
 
             break;
@@ -5010,16 +5066,16 @@
         {
             OMX_VIDEO_PORTDEFINITIONTYPE *videoDef = &def.format.video;
 
-            printf("\n");
-            printf("  // Video\n");
-            printf("  nFrameWidth = %ld\n", videoDef->nFrameWidth);
-            printf("  nFrameHeight = %ld\n", videoDef->nFrameHeight);
-            printf("  nStride = %ld\n", videoDef->nStride);
+            ALOGI("\n");
+            ALOGI("  // Video\n");
+            ALOGI("  nFrameWidth = %ld\n", videoDef->nFrameWidth);
+            ALOGI("  nFrameHeight = %ld\n", videoDef->nFrameHeight);
+            ALOGI("  nStride = %ld\n", videoDef->nStride);
 
-            printf("  eCompressionFormat = %s\n",
+            ALOGI("  eCompressionFormat = %s\n",
                    videoCompressionFormatString(videoDef->eCompressionFormat));
 
-            printf("  eColorFormat = %s\n",
+            ALOGI("  eColorFormat = %s\n",
                    colorFormatString(videoDef->eColorFormat));
 
             break;
@@ -5029,9 +5085,9 @@
         {
             OMX_AUDIO_PORTDEFINITIONTYPE *audioDef = &def.format.audio;
 
-            printf("\n");
-            printf("  // Audio\n");
-            printf("  eEncoding = %s\n",
+            ALOGI("\n");
+            ALOGI("  // Audio\n");
+            ALOGI("  eEncoding = %s\n",
                    audioCodingTypeString(audioDef->eEncoding));
 
             if (audioDef->eEncoding == OMX_AUDIO_CodingPCM) {
@@ -5043,16 +5099,16 @@
                         mNode, OMX_IndexParamAudioPcm, &params, sizeof(params));
                 CHECK_EQ(err, (status_t)OK);
 
-                printf("  nSamplingRate = %ld\n", params.nSamplingRate);
-                printf("  nChannels = %ld\n", params.nChannels);
-                printf("  bInterleaved = %d\n", params.bInterleaved);
-                printf("  nBitPerSample = %ld\n", params.nBitPerSample);
+                ALOGI("  nSamplingRate = %ld\n", params.nSamplingRate);
+                ALOGI("  nChannels = %ld\n", params.nChannels);
+                ALOGI("  bInterleaved = %d\n", params.bInterleaved);
+                ALOGI("  nBitPerSample = %ld\n", params.nBitPerSample);
 
-                printf("  eNumData = %s\n",
+                ALOGI("  eNumData = %s\n",
                        params.eNumData == OMX_NumericalDataSigned
                         ? "signed" : "unsigned");
 
-                printf("  ePCMMode = %s\n", audioPCMModeString(params.ePCMMode));
+                ALOGI("  ePCMMode = %s\n", audioPCMModeString(params.ePCMMode));
             } else if (audioDef->eEncoding == OMX_AUDIO_CodingAMR) {
                 OMX_AUDIO_PARAM_AMRTYPE amr;
                 InitOMXParams(&amr);
@@ -5062,10 +5118,10 @@
                         mNode, OMX_IndexParamAudioAmr, &amr, sizeof(amr));
                 CHECK_EQ(err, (status_t)OK);
 
-                printf("  nChannels = %ld\n", amr.nChannels);
-                printf("  eAMRBandMode = %s\n",
+                ALOGI("  nChannels = %ld\n", amr.nChannels);
+                ALOGI("  eAMRBandMode = %s\n",
                         amrBandModeString(amr.eAMRBandMode));
-                printf("  eAMRFrameFormat = %s\n",
+                ALOGI("  eAMRFrameFormat = %s\n",
                         amrFrameFormatString(amr.eAMRFrameFormat));
             }
 
@@ -5074,12 +5130,12 @@
 
         default:
         {
-            printf("  // Unknown\n");
+            ALOGI("  // Unknown\n");
             break;
         }
     }
 
-    printf("}\n");
+    ALOGI("}\n");
 }
 
 status_t OMXCodec::initNativeWindow() {
@@ -5113,6 +5169,7 @@
 }
 
 void OMXCodec::initOutputFormat(const sp<MetaData> &inputFormat) {
+    ALOGI("PATCH:OMXCodec:initOutputFormat");
     mOutputFormat = new MetaData;
     mOutputFormat->setCString(kKeyDecoderComponent, mComponentName);
     if (mIsEncoder) {
@@ -5133,6 +5190,7 @@
     switch (def.eDomain) {
         case OMX_PortDomainImage:
         {
+            ALOGI("PATCH:OMXCodec:initOutputFormat OMX_PortDomainImage");
             OMX_IMAGE_PORTDEFINITIONTYPE *imageDef = &def.format.image;
             CHECK_EQ((int)imageDef->eCompressionFormat,
                      (int)OMX_IMAGE_CodingUnused);
@@ -5146,6 +5204,7 @@
 
         case OMX_PortDomainAudio:
         {
+            ALOGI("PATCH:OMXCodec:initOutputFormat OMX_PortDomainImage");
             OMX_AUDIO_PORTDEFINITIONTYPE *audio_def = &def.format.audio;
 
             if (audio_def->eEncoding == OMX_AUDIO_CodingPCM) {
@@ -5253,6 +5312,16 @@
 
         case OMX_PortDomainVideo:
         {
+            ALOGI("PATCH:OMXCodec:initOutputFormat OMX_PortDomainVideo");
+            
+            if (!strncmp(mComponentName, "OMX.brcm.", 9)){
+                    ALOGI("PATCH:OMXCodec:initOutputFormat OMX_PortDomainVideo Codec is brcm");
+                    OMX_VIDEO_PORTDEFINITIONTYPE *vdef = &def.format.video;
+                    vdef->eColorFormat = OMX_COLOR_FormatYUV420Planar;
+                    ALOGI("PATCH:OMXCodec:initOutputFormat OMX_PortDomainVideo Codec is brcm set OMX_IndexParamPortDefinition eColorFormat = OMX_COLOR_FormatYUV420Planar");
+                    mOMX->setParameter(mNode, OMX_IndexParamPortDefinition, &def, sizeof(def));
+            }
+
             OMX_VIDEO_PORTDEFINITIONTYPE *video_def = &def.format.video;
 
             if (video_def->eCompressionFormat == OMX_VIDEO_CodingUnused) {
@@ -5273,7 +5342,19 @@
 
             mOutputFormat->setInt32(kKeyWidth, video_def->nFrameWidth);
             mOutputFormat->setInt32(kKeyHeight, video_def->nFrameHeight);
+
+            ALOGI("PATCH:OMXCodec:initOutputFormat OMX_PortDomainVideo BEGIN video_def->eColorFormat %i", video_def->eColorFormat);
+            
+            if(video_def->eColorFormat == OMX_COLOR_FormatYCbYCr){
+                ALOGI("PATCH:OMXCodec:initOutputFormat OMX_PortDomainVideo eColorFormat == OMX_COLOR_FormatYCbYCr");
+                if (!strncmp(mComponentName, "OMX.brcm.", 9)){
+                    ALOGI("PATCH:OMXCodec:initOutputFormat OMX_PortDomainVideo kKeyColorFormat set %i", OMX_COLOR_FormatYUV420Planar);
+                    video_def->eColorFormat = OMX_COLOR_FormatYUV420Planar;
+                }
+            }
+    
             mOutputFormat->setInt32(kKeyColorFormat, video_def->eColorFormat);
+            ALOGI("PATCH:OMXCodec:initOutputFormat OMX_PortDomainVideo END video_def->eColorFormat %i", video_def->eColorFormat);
 
             if (!mIsEncoder) {
                 OMX_CONFIG_RECTTYPE rect;
@@ -5444,6 +5525,8 @@
     for (size_t c = 0; c < matchingCodecs.size(); c++) {
         const char *componentName = matchingCodecs.itemAt(c).mName.string();
 
+        ALOGI("PATCH:QueryCodecs: %s", componentName);
+
         results->push();
         CodecCapabilities *caps = &results->editItemAt(results->size() - 1);
 
@@ -5463,15 +5546,18 @@
         const char *componentName, const char *mime,
         bool isEncoder,
         CodecCapabilities *caps) {
+        ALOGI("PATCH:QueryCodec: %s", componentName);
     if (strncmp(componentName, "OMX.", 4)) {
         // Not an OpenMax component but a software codec.
         caps->mFlags = 0;
         caps->mComponentName = componentName;
         return OK;
     }
+    caps->mColorFormats.push(OMX_COLOR_FormatYUV420Planar);
 
     sp<OMXCodecObserver> observer = new OMXCodecObserver;
     IOMX::node_id node;
+    ALOGI("PATCH:QueryCodec->allocateNode");
     status_t err = omx->allocateNode(componentName, observer, &node);
 
     if (err != OK) {
@@ -5512,7 +5598,9 @@
 #else
     portFormat.nPortIndex = !isEncoder ? 1 : 0;
 #endif
+
     for (OMX_U32 index = 0;;index++)  {
+        ALOGI("PATCH:QueryCodec->OMX_VIDEO_PARAM_PORTFORMATTYPE:begin");
         portFormat.nIndex = index;
         err = omx->getParameter(
                 node, OMX_IndexParamVideoPortFormat,
@@ -5520,8 +5608,28 @@
         if (err != OK) {
             break;
         }
-        caps->mColorFormats.push(portFormat.eColorFormat);
-    }
+        ALOGI("PATCH:QueryCodec->OMX_VIDEO_PARAM_PORTFORMATTYPE:Begin portFormat.eColorFormat = %i, componentName = %s", portFormat.eColorFormat, componentName);
+        if (portFormat.eColorFormat == OMX_COLOR_FormatYCbYCr) {
+            ALOGI("PATCH:QueryCodec->OMX_VIDEO_PARAM_PORTFORMATTYPE: OMX_COLOR_FormatYCbYCr");
+            if (!strncmp(componentName, "OMX.brcm.", 9)){
+                ALOGI("PATCH:QueryCodec->OMX_VIDEO_PARAM_PORTFORMATTYPE (%s)", componentName);
+                portFormat.eColorFormat = OMX_COLOR_FormatYUV420Planar;
+                ALOGI("PATCH:QueryCodec->OMX_VIDEO_PARAM_PORTFORMATTYPE portFormat.eColorFormat(%i)", portFormat.eColorFormat);
+                status_t errs = omx->setParameter(node, OMX_IndexParamVideoPortFormat, &portFormat, sizeof(portFormat));
+                if (errs != OK){
+                    ALOGE("PATCH:QueryCodec->OMX_VIDEO_PARAM_PORTFORMATTYPE setParameter failed: %d", errs);
+                }
+                caps->mColorFormats.push(OMX_COLOR_FormatYUV420Planar);
+            }else{
+                ALOGI("PATCH:QueryCodec->OMX_VIDEO_PARAM_PORTFORMATTYPE color is YCbYCr but not brcm (%s)", componentName);
+                caps->mColorFormats.push(portFormat.eColorFormat);
+            }
+        }else{
+            ALOGI("PATCH:QueryCodec->OMX_VIDEO_PARAM_PORTFORMATTYPE color not YCbYCr (%i)", portFormat.eColorFormat);
+            caps->mColorFormats.push(portFormat.eColorFormat);
+        }
+        ALOGI("PATCH:QueryCodec->OMX_VIDEO_PARAM_PORTFORMATTYPE:End portFormat.eColorFormat = %i, componentName = %s", portFormat.eColorFormat, componentName);
+   }
 
     if (!isEncoder && !strncmp(mime, "video/", 6)) {
         if (omx->storeMetaDataInBuffers(
Only in b/frameworks/av/media/libstagefright: OMXCodec.cpp~
diff -ur a/frameworks/native/libs/gui/SensorEventQueue.cpp b/frameworks/native/libs/gui/SensorEventQueue.cpp
--- a/frameworks/native/libs/gui/SensorEventQueue.cpp	2015-12-28 04:28:09.000000000 +0545
+++ b/frameworks/native/libs/gui/SensorEventQueue.cpp	2016-05-18 19:51:18.136120570 +0545
@@ -130,6 +130,10 @@
                                         int maxBatchReportLatencyUs, int reservedFlags) const {
     status_t err = mSensorEventConnection->enableDisable(handle, true, us2ns(samplingPeriodUs),
                                                  us2ns(maxBatchReportLatencyUs), reservedFlags);
+    if (err == NO_ERROR) {
+        mSensorEventConnection->setEventRate(handle, us2ns(samplingPeriodUs));
+    }
+    return err;
     #ifdef SENSORS_SETRATE_ON_ENABLE
     if (err == NO_ERROR) {
         mSensorEventConnection->setEventRate(handle, us2ns(samplingPeriodUs));
Only in b/frameworks/native/libs/gui: SensorEventQueue.cpp~
diff -ur a/frameworks/native/services/surfaceflinger/DisplayHardware/HWComposer.cpp b/frameworks/native/services/surfaceflinger/DisplayHardware/HWComposer.cpp
--- a/frameworks/native/services/surfaceflinger/DisplayHardware/HWComposer.cpp	2015-12-28 04:28:09.000000000 +0545
+++ b/frameworks/native/services/surfaceflinger/DisplayHardware/HWComposer.cpp	2016-05-20 12:33:26.392643906 +0545
@@ -1365,16 +1365,20 @@
     virtual void setPlaneAlpha(uint8_t alpha) {
 // CAPRI_HWC does not respect planeAlpha despite being v1.2
 #ifndef CAPRI_HWC
+    #ifndef HAWAII_HWC
         if (hwcHasApiVersion(mHwc, HWC_DEVICE_API_VERSION_1_2)) {
             getLayer()->planeAlpha = alpha;
         } else {
 #endif
+    #endif
             if (alpha < 0xFF) {
                 getLayer()->flags |= HWC_SKIP_LAYER;
             }
 #ifndef CAPRI_HWC
+    #ifndef HAWAII_HWC
         }
 #endif
+    #endif
     }
     virtual void setDefaultState() {
         hwc_layer_1_t* const l = getLayer();
Only in b/frameworks/native/services/surfaceflinger/DisplayHardware: HWComposer.cpp~
diff -ur a/frameworks/native/services/surfaceflinger/Layer.cpp b/frameworks/native/services/surfaceflinger/Layer.cpp
--- a/frameworks/native/services/surfaceflinger/Layer.cpp	2015-12-28 04:28:09.000000000 +0545
+++ b/frameworks/native/services/surfaceflinger/Layer.cpp	2016-05-20 06:33:21.409124694 +0545
@@ -1214,6 +1214,7 @@
     uint32_t orientation = 0;
 // CAPRI_HWC has display problem in landscape mode when transform is used
 #ifndef CAPRI_HWC
+    #ifndef HAWAII_HWC
     if (!mFlinger->mDebugDisableTransformHint) {
         // The transform hint is used to improve performance, but we can
         // only have a single transform hint, it cannot
@@ -1225,6 +1226,7 @@
         }
     }
 #endif
+    #endif
     mSurfaceFlingerConsumer->setTransformHint(orientation);
 }
 
Only in b/frameworks/native/services/surfaceflinger: Layer.cpp~
diff -ur a/frameworks/native/services/surfaceflinger/SurfaceFlinger.cpp b/frameworks/native/services/surfaceflinger/SurfaceFlinger.cpp
--- a/frameworks/native/services/surfaceflinger/SurfaceFlinger.cpp	2015-12-28 04:28:09.000000000 +0545
+++ b/frameworks/native/services/surfaceflinger/SurfaceFlinger.cpp	2016-05-20 04:21:16.305442173 +0545
@@ -1124,6 +1124,7 @@
             sp<const DisplayDevice> hw(mDisplays[dpy]);
             const int32_t id = hw->getHwcDisplayId();
             if (id >= 0) {
+            #ifndef HAWAII_HWC
 #ifdef QCOM_HARDWARE
                 // Get the layers in the current drawying state
                 const LayerVector& layers(mDrawingState.layersSortedByZ);
@@ -1145,7 +1146,7 @@
                     }
                 }
 #endif
-
+            #endif
                 const Vector< sp<Layer> >& currentLayers(
                     hw->getVisibleLayersSortedByZ());
                 const size_t count = currentLayers.size();
@@ -1158,6 +1159,7 @@
                      */
                     const sp<Layer>& layer(currentLayers[i]);
                     layer->setPerFrameData(hw, *cur);
+            #ifndef HAWAII_HWC
 #ifdef QCOM_HARDWARE
                     if(freezeSurfacePresent) {
                         // if freezeSurfacePresent, set ANIMATING flag
@@ -1179,6 +1181,7 @@
                             }
                         }
                     }
+            #endif
 #endif
                 }
             }
@@ -3226,6 +3229,11 @@
     useReadPixels = true;
 #endif
 
+    #ifdef HAWAII_HWC
+        useReadPixels = true;
+    #endif
+
+
     // get screen geometry
     const uint32_t hw_w = hw->getWidth();
     const uint32_t hw_h = hw->getHeight();
Only in b/frameworks/native/services/surfaceflinger: SurfaceFlinger.cpp~
diff -ur a/frameworks/opt/telephony/src/java/com/android/internal/telephony/PhoneBase.java b/frameworks/opt/telephony/src/java/com/android/internal/telephony/PhoneBase.java
--- a/frameworks/opt/telephony/src/java/com/android/internal/telephony/PhoneBase.java	2015-09-13 06:43:47.000000000 +0545
+++ b/frameworks/opt/telephony/src/java/com/android/internal/telephony/PhoneBase.java	2016-05-18 19:41:40.892086046 +0545
@@ -129,6 +129,7 @@
     boolean mDnsCheckDisabled;
     public DcTrackerBase mDcTracker;
     boolean mDoesRilSendMultipleCallRing;
+    boolean mDoesRilSendCallRing;
     int mCallRingContinueToken;
     int mCallRingDelay;
     public boolean mIsTheCurrentActivePhone = true;
@@ -292,6 +293,11 @@
                 TelephonyProperties.PROPERTY_RIL_SENDS_MULTIPLE_CALL_RING, true);
         Rlog.d(LOG_TAG, "mDoesRilSendMultipleCallRing=" + mDoesRilSendMultipleCallRing);
 
+        // Some RIL do not even send a single RIL_UNSOL_CALL_RING
+        mDoesRilSendCallRing = SystemProperties.getBoolean(
+                "ro.telephony.call_ring", true);
+        Rlog.d(LOG_TAG, "mDoesRilSendCallRing=" + mDoesRilSendCallRing);
+
         mCallRingDelay = SystemProperties.getInt(
                 TelephonyProperties.PROPERTY_CALL_RING_DELAY, 3000);
         Rlog.d(LOG_TAG, "mCallRingDelay=" + mCallRingDelay);
@@ -1284,6 +1290,18 @@
     protected void notifyNewRingingConnectionP(Connection cn) {
         if (!mIsVoiceCapable)
             return;
+
+        // Fake RIL_UNSOL_CALL_RING if the RIL doesn't send it.
+        // Note that we need the delay to prevent the request from
+        // being sent after CallTracker detects "RINGING" state, but
+        // before the correct contact-specific ringtone is queried.
+        // Otherwise, the incorrect ringtone will be used
+        if (!mDoesRilSendCallRing) {
+            int token = ++mCallRingContinueToken;
+            sendMessageDelayed(
+                    obtainMessage(EVENT_CALL_RING_CONTINUE, token, 0), mCallRingDelay);
+        }
+
         AsyncResult ar = new AsyncResult(null, cn, null);
         mNewRingingConnectionRegistrants.notifyRegistrants(ar);
     }
@@ -1421,6 +1439,7 @@
         pw.println(" mDnsCheckDisabled=" + mDnsCheckDisabled);
         pw.println(" mDcTracker=" + mDcTracker);
         pw.println(" mDoesRilSendMultipleCallRing=" + mDoesRilSendMultipleCallRing);
+        pw.println(" mDoesRilSendCallRing=" + mDoesRilSendCallRing);
         pw.println(" mCallRingContinueToken=" + mCallRingContinueToken);
         pw.println(" mCallRingDelay=" + mCallRingDelay);
         pw.println(" mIsTheCurrentActivePhone=" + mIsTheCurrentActivePhone);
Only in b/frameworks/opt/telephony/src/java/com/android/internal/telephony: PhoneBase.java~
diff -ur a/hardware/broadcom/libbt/src/userial_vendor.c b/hardware/broadcom/libbt/src/userial_vendor.c
--- a/hardware/broadcom/libbt/src/userial_vendor.c	2013-12-06 06:04:05.000000000 +0545
+++ b/hardware/broadcom/libbt/src/userial_vendor.c	2016-05-18 19:39:02.488076572 +0545
@@ -182,6 +182,10 @@
     uint16_t parity;
     uint8_t stop_bits;
 
+    #if (BT_WAKE_VIA_USERIAL_IOCTL==TRUE)
+        int ldisc;
+    #endif
+
     vnd_userial.fd = -1;
 
     if (!userial_to_tcio_baud(p_cfg->baud, &baud))
@@ -251,6 +255,13 @@
     tcsetattr(vnd_userial.fd, TCSANOW, &vnd_userial.termios);
 
 #if (BT_WAKE_VIA_USERIAL_IOCTL==TRUE)
+    // TODO: check for breakage on tuna (Galaxy Nexus). It defines this,
+    // but does not contain the kernel code to support it.
+
+    // Switch to N_BRCM_HCI line disclipline for ioctl to work
+    ldisc = 25; // N_BRCM_HCI
+    ioctl(vnd_userial.fd, TIOCSETD, &ldisc);
+
     userial_ioctl_init_bt_wake(vnd_userial.fd);
 #endif
 
Only in b/hardware/broadcom/libbt/src: userial_vendor.c~
